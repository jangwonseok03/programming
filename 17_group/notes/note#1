객체지향프로그래밍 1주차

여기에 있는 대부분 것들을 잘 몰라서 서로 인터넷으로 찾아보고 어느정도 이해를 하고 서로 설명을 진행했다.
(그래서 설명을 하면서 자주 막혔다.)

1. 기계어, 어셈블리어, 고급언어
기계어 
프로그래밍 언어의 기본
컴퓨터를 작동시키기 위해 0과 1로 나타낸  컴퓨터 고유 명령 형식이다.
컴퓨터의 cpu는 원래부터 기계어만 처리가 가능하다. (컴퓨터는 2진수로만 알아듣기 때문에)

어셈블리어 
기계어와 일대일 대응이 되는 컴퓨터 프로그래밍의 저급언어이다.
어셈블러 : 어셈블리어 프로그램을 기계어 코드로 변환시켜 주는 것이다.

고급언어 
C나 C++과 자바등이 있다.
사람들이 이해하기 쉽게 작성된 프로그래밍 언어이다.
컴파일러 : 고급언어로 작성된 프로그램을 기계어 코드로 변환을 시켜주는 것

2. 객체지향
상속 
부모 클래스와 자식 클래스가 있는데 여기에서 상속은 부모 클래스의 기능을 자식 클래스가 받아서 쓸 수 있는 것을 
말한다.
코딩을 하다보면 같은 기능을 가지고 사용할 때가 있는데 이것을 매번 계속 정의하면 힘들기 때문에 상속을 통해서
쉽게 할 수 있다.

캡슐화
실제 구현하는 내용을 외부에 보이지 않게 하는 것이다. 따라서 정보를 숨기기에 좋다.
데이터를 캡슐로 감싸서 외부의 접근에 대해 보호할 수 있는 특징이 있다.
캡슐화는 클래스를 사용해서 정의하고, 캡슐 약처럼 객체의 사용법만 알고, 내부는 포장하여 보거나 변형할 수 없게 하는 개념이다.

다형성
똑같은 행위에 대해서 하나의 이름을 사용하는 것
하나의 기능이 어떠한 경우에 따라서 다르게 보이거나 다르게 작동하는 현상
오버로딩과 오버라이딩이 있다.

3. 절차지향 프로그래밍, 객체지향 프로그래밍
절차지향 프로그래밍
실행하고자 하는 절차대로 명령어를 나열하는 방식
순차적인 처리가 중요시되는 방식이다.

객체지향 프로그래밍
객체들에 대해 정의를 하고 객체들의 상호 관계와 상호 작용을 구현하는 방식이다.
객체들이 만들어지고 각 개체들이 서로 자기들의 일을 하면서 다른 객체와 소통을 하는 방식이다.

절차지향과 객체지향의 차이점
-절차지향은 물 흐르듯 위에서 아래로 절차대로 흐르는 프로그램이라 순차적인 처리가 중요하고, 객체지향은 절차지향과 다르게 다양한 상황에 대처할 수 있다는 차이점이 있다.
